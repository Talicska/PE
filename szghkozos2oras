/*
 ============================================================================
 Name        : mondat.c
 Author      :
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include <netdb.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <string.h>

#define MAXCLIENTS 2

struct mondat{
    char m[1024];
    struct mondat* next;
};

struct client {
    int fd;
    int mod; //0: KI, 1: KIVEL, 2: HOL, 3: MIT
    char ip[INET6_ADDRSTRLEN];
    char port[6];
    struct client *next;
};

struct elem
{
    char szo[100];
    struct elem *next;
};

struct client *clients=NULL;
struct elem *kil=NULL;
struct elem *tarsl=NULL;
struct elem *holl=NULL;
struct elem *mitl=NULL;
struct mondat* mondatok=NULL;




int main(void) {

    int l1, l2, l3, l4;
    struct elem* uj=(struct elem*)malloc(sizeof(struct elem));
    strcpy(uj->szo,"Kata");
    uj->next=kil;
    kil=uj;
    l1=1;
    uj=(struct elem*)malloc(sizeof(struct elem));
    strcpy(uj->szo,"Petivel");
    uj->next=tarsl;
    tarsl=uj;
    l2=1;
    uj=(struct elem*)malloc(sizeof(struct elem));
    strcpy(uj->szo,"ott");
    uj->next=holl;
    holl=uj;
    l3=1;
    uj=(struct elem*)malloc(sizeof(struct elem));
    strcpy(uj->szo,"eszik");
    uj->next=mitl;
    mitl=uj;
    l4=1;



    struct addrinfo hints, *res;
    struct sockaddr claddr;

    memset(&hints, 0, sizeof(hints));
    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_flags = AI_PASSIVE;

    getaddrinfo(NULL, "1111", &hints, &res);

    int listener, new_fd, fdmax, i, j, cln = 0, port;
    fd_set master, readfds;
    char buff[1024];

    listener = socket(res->ai_family, res->ai_socktype, res->ai_protocol);


    int yes=1;                                                                      //portfelszabaditas
    if(setsockopt(listener, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))== -1){
        perror("Setsockopt");
        exit(1);
    }


    bind(listener, res->ai_addr, res->ai_addrlen);

    listen(listener, 10);

    FD_ZERO(&master);
    FD_ZERO(&readfds);
    FD_SET(listener, &master);
    fdmax = listener;

    while (1) {
        readfds = master;
        select(fdmax + 1, &readfds, NULL, NULL, NULL);
        for (i = 0; i <= fdmax; i++) {
            if (FD_ISSET(i, &readfds)) {
                if (i == listener) { //új kliens érkezett
                    socklen_t addrlen = sizeof(claddr);
                    new_fd = accept(listener, &claddr, &addrlen);
                    if (cln == MAXCLIENTS) { //elkuldjuk

                        if(!fork()){
                            close(listener);
                            FD_CLR(listener, &master);
                        }else{
                            FD_ZERO(&master);
                            FD_SET(listener, &master);
                            FD_SET(new_fd, &master);

                            if (new_fd > fdmax)
                                fdmax = new_fd;
                            struct client *newcl = (struct client *) malloc(sizeof(struct client));
                            newcl->fd = new_fd;
                            newcl->mod = 0;
                            if (claddr.sa_family == AF_INET)
                            {inet_ntop(AF_INET, &(((struct sockaddr_in *) &claddr)->sin_addr),
                                       newcl->ip, INET_ADDRSTRLEN);
                                port = ntohs(((struct sockaddr_in *)&claddr)->sin_port);
                            }
                            else
                            {inet_ntop(AF_INET6, &(((struct sockaddr_in6 *) &claddr)->sin6_addr),
                                       newcl->ip, INET6_ADDRSTRLEN);
                                port = ntohs(((struct sockaddr_in6 *)&claddr)->sin6_port);
                            }
                            sprintf(newcl->port,"%d",port);
                            newcl->next=NULL;
                            clients=newcl;
                            cln=1;
                        }


                    } else { //bevesszuk
                        if (new_fd > fdmax)
                            fdmax = new_fd;
                        FD_SET(new_fd, &master);
                        struct client *newcl = (struct client *) malloc(
                                    sizeof(struct client));
                        newcl->fd = new_fd;
                        newcl->mod = 0;
                        if (claddr.sa_family == AF_INET)
                        {inet_ntop(AF_INET, &(((struct sockaddr_in *) &claddr)->sin_addr),
                                   newcl->ip, INET_ADDRSTRLEN);
                            port = ntohs(((struct sockaddr_in *)&claddr)->sin_port);
                        }
                        else
                        {inet_ntop(AF_INET6, &(((struct sockaddr_in6 *) &claddr)->sin6_addr),
                                   newcl->ip, INET6_ADDRSTRLEN);
                            port = ntohs(((struct sockaddr_in6 *)&claddr)->sin6_port);
                        }
                        sprintf(newcl->port,"%d",port);
                        newcl->next=clients;
                        clients=newcl;
                        cln++;
                    }

                }
                else
                { //küldött valaki valamit
                    int recbytes;
                    recbytes = recv(i,buff,sizeof(buff),0);
                    if(recbytes==0)
                    {//kilépett

                        FD_CLR(i, &master);
                        struct client *cltmp=clients;
                        for(;cltmp->next->fd!=i;cltmp=cltmp->next);
                        struct client* temp=cltmp->next;
                        cltmp->next=cltmp->next->next;
                        free(temp);

                    }
                    else
                    {//adatot küldött
                        buff[recbytes-2]='\0';
                        if(strncmp(buff,"KI",2)==0)
                        {
                            struct client *cltmp=clients;
                            for(;cltmp->fd!=i;cltmp=cltmp->next);
                            cltmp->mod=0;
                        }
                        else
                        {
                            if(strncmp(buff,"TARS",4)==0)
                            {
                                struct client *cltmp=clients;
                                for(;cltmp->fd!=i;cltmp=cltmp->next);
                                cltmp->mod=1;
                            }
                            else
                            {
                                if(strncmp(buff,"HOL",3)==0)
                                {
                                    struct client *cltmp=clients;
                                    for(;cltmp->fd!=i;cltmp=cltmp->next);
                                    cltmp->mod=2;
                                }
                                else
                                {
                                    if(strncmp(buff,"MIT",3)==0)
                                    {
                                        struct client *cltmp=clients;
                                        for(;cltmp->fd!=i;cltmp=cltmp->next);
                                        cltmp->mod=3;
                                    }
                                    else
                                    {
                                        if(strncmp(buff,"?",1)==0){
                                            struct mondat* akt=mondatok;
                                            for(;akt!=NULL;akt=akt->next){
                                                send(i, akt->m, strlen(akt->m),0);
                                            }
                                        }

                                        if(strncmp(buff,"MONDAT",6)==0)
                                        {
                                            char mondat[500]="";
                                            struct client *cltmp=clients;
                                            for(;cltmp->fd!=i;cltmp=cltmp->next);
                                            sprintf(mondat,"IP: %s, port: %s (%d): ",cltmp->ip,cltmp->port,i);
                                            int j=0;
                                            int k=rand()%l1;
                                            struct elem *elemtmp = kil;
                                            for(;j!=k;elemtmp=elemtmp->next,j++);
                                            strcat(mondat,elemtmp->szo);strcat(mondat," ");
                                            j=0;
                                            k=rand()%l2;
                                            elemtmp = tarsl;
                                            for(;j!=k;elemtmp=elemtmp->next,j++);
                                            strcat(mondat,elemtmp->szo);strcat(mondat," ");
                                            j=0;
                                            k=rand()%l3;
                                            elemtmp = holl;
                                            for(;j!=k;elemtmp=elemtmp->next,j++);
                                            strcat(mondat,elemtmp->szo);strcat(mondat," ");
                                            j=0;
                                            k=rand()%l4;
                                            elemtmp = mitl;
                                            for(;j!=k;elemtmp=elemtmp->next,j++);
                                            strcat(mondat,elemtmp->szo);strcat(mondat," ");

                                            struct mondat * uj=(struct mondat*)malloc(sizeof(struct mondat));
                                            strcpy(uj->m, mondat);
                                            uj->next=mondatok;
                                            mondatok=uj;

                                            for(j=0;j<=fdmax;j++)
                                                if((FD_ISSET(j,&master)) && (j!=listener))
                                                    send(j, mondat, strlen(mondat),0);

                                        }
                                        else
                                        {//nem parancsot küldött
                                            struct elem *ujelem=(struct elem*)malloc(sizeof(struct elem));
                                            strcpy(ujelem->szo,buff);
                                            struct client *cltmp=clients;
                                            int clmod;
                                            for(;cltmp->fd!=i;cltmp=cltmp->next);
                                            clmod = cltmp->mod;
                                            switch(clmod)
                                            {
                                            case 0: ujelem->next=kil;
                                                kil=ujelem;
                                                l1++;
                                                break;
                                            case 1: ujelem->next=tarsl;
                                                tarsl=ujelem;
                                                l2++;
                                                break;
                                            case 2: ujelem->next=holl;
                                                holl=ujelem;
                                                l3++;
                                                break;
                                            case 3: ujelem->next=mitl;
                                                mitl=ujelem;
                                                l4++;
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}




//5ös szintre kész

